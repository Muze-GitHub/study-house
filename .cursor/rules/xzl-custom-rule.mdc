---
description: 
globs: 
alwaysApply: false
---
# 通用开发原则

## 代码结构基本原则
项目的代码结构遵循以下基本原则：

- 单文件代码行数严格控制在1000行以内
- 组件优先使用Function Component + React Hooks，避免使用Class Component
- 每个单文件最多只包含1个类组件或者2个函数式组件
- 每个函数的圈复杂度(Cyclomatic Complexity)控制在15以内，推荐在10以内
- 注释行数应最少占代码行数的5%，圈复杂度在10以上的核心逻辑必须添加有效注释
- 函数参数数量不超过3个，如需更多参数请使用对象参数模式
- 函数体长度控制在100行以内，超过时考虑拆分为多个子函数
- 优先使用`src/components`或antd组件进行开发
- 工具类函数优先使用`src/utils`目录中的函数
- 整体工程均使用TypeScript
- 尽量减少TypeScript类型断言；非必要不使用any
- 其余杂项参照工程中的现有代码

## 文件命名与组织规范

### 路由与组件命名规范
- 文件及文件夹命名尽量精简，长度应小于40字符
- 文件夹及所属文件命名使用大驼峰式命名(PascalCase)，如`UserProfile`
- 禁止使用无意义的命名，例如使用`Login`、`PlanList`等，而不是`table`、`list`等
- 文件夹及所属文件名命名、导出名统一，且配置相应package.json
- package.json应指定同级与文件夹同名的文件为入口文件

### 组件文件组织规范
- 当前模块使用到的私有组件放在内部的`components`文件夹中
- 私有组件文件夹及文件命名遵循大驼峰式命名规范
- 被引用次数超过2次以上的组件均放在`src/components`文件夹中
- 当前模块使用到的配置文件放在内部的`config`文件夹中
- 配置文件命名使用小驼峰式命名(camelCase)

### 接口文件及接口命名规范
- 接口文件命名使用小驼峰式命名，应与实际模块相对应
- 禁止使用无意义的命名
- 接口函数命名使用小驼峰式命名，接口名加上`$`前缀

## 变量、常量与函数命名规范
- 变量、常量的命名尽量精简，使用小驼峰式命名，长度应小于20字符
- 变量、常量的命名除遍历外（for、forEach、map等）禁止使用缩写、无意义、语义性差的命名
- 布尔值的声明使用is/has开头，如`isVisible`、`hasPermission`
- 控制弹窗等元素的显隐使用show开头，如`showModal`
- 常量命名使用全大写，使用下划线分隔，如`MAX_COUNT`，同时给出相应注释
- 函数命名使用小驼峰式命名，语义应明确表达其用途
- 绑定DOM的事件处理函数以handle开头，如`handleClick`
- 子组件接收的props传递的函数形参名以on开头，如`onClick`
- 除路由、组件外的其余文件（如接口、公共方法等）命名使用小驼峰式命名

## React开发规范

### 组件设计原则
- 组件职责单一：每个组件只负责一个特定的功能或渲染逻辑
- 按照功能模块来组织组件，相关的组件、样式等文件放在同一文件夹下
- 组件嵌套层级不得超过3层
- props的参数数量尽量不超过5个
- props的函数数量尽量不超过5个

### 状态管理规范
- 复杂且需频繁变动取值的变量使用Map、Set替代Object、Array
- useState钩子统一放在函数式组件的最上方
- useEffect钩子统一放在return语句的上方
- 引用数据类型的数据，且需要频繁修改、依赖多的场景下，使用use-immer替代useState
- 相互有逻辑关联的、有一起改变的场景的state应合并为一个对象
- 尽可能保证useState不冗余、不滥用
- useEffect依赖数组不得超过3个
- 函数式组件中，useState不超过10个；useEffect不超过5个

### 数据流规范
- 禁止同一数据沿嵌套组件向下传递
- 公共状态、数据等使用Context API
- 尽量减少useRef来缓存数据
- 不滥用useCallback、useMemo、memo、shouldComponentUpdate等优化方式

## TypeScript规范
- 所有组件props必须定义明确的接口类型
- 尽量使用类型推断，减少冗余类型注解
- 使用联合类型代替枚举，如`type Status = 'loading' | 'success' | 'error'`
- 函数返回值必须明确定义类型
- 使用泛型增强代码复用性和类型安全性
- 禁止使用`any`类型，特殊情况必须添加注释说明原因

## 样式规范
- 视觉效果：遵循"大气简约美观、有设计感"的设计原则
  - 配色方案：优先使用项目内已定义的主题色变量
  - 间距布局：保持一致的内外边距，遵循2px倍数原则
  - 交互反馈：确保所有可交互元素有合适的hover/active状态
- 技术规范：
  - 强制使用SCSS进行样式编写，禁止使用CSS-in-JS或行内样式
  - 组件样式文件命名规范：与组件同名，后缀为`.scss`
  - 所有样式必须使用CSS模块化，严格避免全局样式污染
- 代码质量：
  - SCSS选择器嵌套最多3层
  - 选择器应遵循单一职责原则，一个选择器只负责一个视觉或功能特性
  - 样式属性应按类型分组排列（布局→尺寸→外观→文字→其他）
  - 优先使用Flex/Grid布局，避免使用传统的float布局
- 性能优化：
  - 避免过度使用CSS动画，必要时使用transform和opacity而非其他属性
  - 媒体资源需压缩优化，并提供适当的加载态